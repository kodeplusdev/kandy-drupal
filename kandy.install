<?php
/**
 * @file
 * Kandy Installation.
 *
 * The database schema is heavily commented; review for details.
 *
 * NOTE: For the registries which are essentially the makeup of the Kandy
 *  Configuration Object, no indexes are specified because they are usually
 *  referenced only to retrieve all the data.  In fact, there should never be a
 *  situation in which a module is querying directly against those tables.
 *
 * @ingroup Kandy
 */

/**
 * Implements hook_schema().
 */
function kandy_schema() {
  $schema['kandy_users'] = array(
    'description' => 'The base table for kandy users.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a kandy user.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'user_id' => array(
        'description' => 'The kandy user id',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'first_name' => array(
        'description' => 'The first name of kandy user',
        'type' => 'varchar',
        'length' => 255,
      ),
      'last_name' => array(
        'description' => 'The last name of kandy user',
        'type' => 'varchar',
        'length' => 255,
      ),
      'password' => array(
        'description' => 'The password of kandy user(plain text)',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email' => array(
        'description' => 'The email of kandy user',
        'type' => 'varchar',
        'length' => 255,
      ),
      'domain_name' => array(
        'description' => 'The domain name of kandy application',
        'type' => 'varchar',
        'length' => 255,
      ),
      'api_key' => array(
        'description' => 'The api key of kandy application',
        'type' => 'varchar',
        'length' => 255,
      ),
      'api_secret' => array(
        'description' => 'The api secret key of kandy application',
        'type' => 'varchar',
        'length' => 255,
      ),
      'main_user_id' => array(
        'description' => 'The user id of system user',
        'type' => 'varchar',
        'length' => 255,
      ),
      'type' => array(
        'description' => 'Type of user',
        'type' => 'int',
        'default' => 0,
      ),
      'created_at' => array(
        'description' => 'The created time of kandy user',
        'mysql_type' => 'DATETIME',
      ),
      'updated_at' => array(
        'description' => 'The updated time of kandy user',
        'mysql_type' => 'DATETIME',
      ),
      'presence_status' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'description' => 'Presence status of user',
        'length' => '50',
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['kandy_live_chat'] = array(
    'fields' => array(
      'id' => array(
        'description' => 'The primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agent_user_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'customer_user_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'customer_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'customer_email' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'begin_at'  => array(
        'type' => 'int',
        'length' => 11,
      ),
      'end_at'  => array(
        'type' => 'int',
        'length' => 11,
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['kandy_live_chat_rate'] = array(
    'fields' => array(
      'id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'main_user_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'rated_by' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'rated_time' => array(
        'type' => 'int',
        'length' => 10,
        'not null' => TRUE,
      ),
      'point' => array(
        'type' => 'int',
        'length' => 10,
      ),
      'comment' => array(
        'type' => 'text',
      ),
    ),
    'primary key' => array('id'),
  );
  $schema['kandy_user_login'] = array(
    'fields' => array(
      'id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'kandy_user_id' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'type' => array(
        'description' => 'Type of user',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'login status of user',
        'type' => 'int',
      ),
      'browser_agent' => array(
        'description' => 'Browser agent info of user',
        'type' => 'varchar',
        'length' => 255,
      ),
      'ip_address' => array(
        'description' => 'IP address of user',
        'type' => 'varchar',
        'length' => 255,
      ),
      'time' => array(
        'description' => 'Last time when user is considered active',
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function kandy_install() {
  module_load_include('php', 'kandy', 'kandy_api');
  kandy_publish_assets();
}

/**
 * Implements hook_uninstall().
 *
 * Removes the database tables and persistent variables managed through Drupal.
 *  Anything set in the Kandy Admin interface will be forgotten.
 *
 * Uninstall the DB schema and clean up as much as is feasible.
 */
function kandy_uninstall() {
  // Drop my tables.
  if (db_table_exists('kandy_users')) {
    drupal_uninstall_schema('kandy_users');
  }

  variable_del('kandy_domain_name');
  variable_del('kandy_api_key');
  variable_del('kandy_domain_secret_key');
  variable_del('kandy_js_url');
  variable_del('kandy_fcs_url');
  variable_del('kandy_jquery_reload');
}
/**
 * Implements hook_update().
 *
 * Add new table schema for new live chat feature.
 */
function kandy_update_7000() {
  $schema['kandy_live_chat'] = array(
    'fields' => array(
      'id' => array(
        'description' => 'The primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agent_user_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'customer_user_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'customer_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'customer_email' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'begin_at'  => array(
        'type' => 'int',
        'length' => 11,
      ),
      'end_at'  => array(
        'type' => 'int',
        'length' => 11,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}
/**
 * Implements hook_update().
 */
function kandy_update_7242() {
  db_add_field('kandy_users', 'presence_status', array(
    'type' => 'varchar',
    'not null' => FALSE,
    'description' => 'Presence status of user',
    'length' => '50',
  ));
}
/**
 * Implements hook_requirements().
 */
function kandy_requirements($phase) {
  $requirements = array();
  $t = get_t();
  $requirements['rateit'] = array(
    'title' => $t('Jquery Rateit Library'),
  );
  $libraries = libraries_get_libraries();
  if (isset($libraries['rateit'])) {
    $requirements['rateit']['value'] = $t('Installed');
    $requirements['rateit']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['rateit']['value'] = $t('Not Installed');
    $requirements['rateit']['severity'] = REQUIREMENT_ERROR;
    $requirements['rateit']['description'] = $t('Please install the rateit library %url.', array('%url' => 'https://rateit.codeplex.com'));
  }
  return $requirements;
}
