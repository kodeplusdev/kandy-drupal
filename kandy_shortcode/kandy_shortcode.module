<?php
/**
 * @file
 * Define our shortcode and their titles, descriptions, and callback functions.
 *
 * @package :    kandy
 *
 * @subpackage : kandy
 */

/**
 * Shortcode Info.
 *
 * @return mixed
 *   Array info.
 */
function kandy_shortcode_shortcode_info()
{

  $shortcodes['kandyVideo'] = array(
    'title' => t('Kandy Video'),
    'description' => t('Show kandy video'),
    'process callback' => 'kandy_shortcode_kandy_video',
    'tips callback' => 'kandy_shortcode_kandy_video_tip',
  );

  $shortcodes['kandyVideoButton'] = array(
    'title' => t('Kandy Video Button'),
    'description' => t('Show kandy video button'),
    'process callback' => 'kandy_shortcode_kandy_video_button',
    'tips callback' => 'kandy_shortcode_kandy_video_button_tip',
  );

  $shortcodes['kandyVoiceButton'] = array(
    'title' => t('Kandy Voice Button'),
    'description' => t('Show kandy voice button'),
    'process callback' => 'kandy_shortcode_kandy_voice_button',
    'tips callback' => 'kandy_shortcode_kandy_voice_button_tip',
  );

  $shortcodes['kandyStatus'] = array(
    'title' => t('Kandy Status'),
    'description' => t('Show kandy status'),
    'process callback' => 'kandy_shortcode_kandy_status',
    'tips callback' => 'kandy_shortcode_kandy_status_tip',
  );

  $shortcodes['kandyAddressBook'] = array(
    'title' => t('Kandy Address Book'),
    'description' => t('Show kandy address book'),
    'process callback' => 'kandy_shortcode_kandy_address_book',
    'tips callback' => 'kandy_shortcode_kandy_address_book_tip',
  );

  $shortcodes['kandyChat'] = array(
    'title' => t('Kandy Chat'),
    'description' => t('Show kandy chat'),
    'process callback' => 'kandy_shortcode_kandy_chat',
    'tips callback' => 'kandy_shortcode_kandy_chat_tip',
  );

  $shortcodes['kandySms'] = array(
    'title' => t('Kandy SMS'),
    'description' => t('Show kandy SMS'),
    'process callback' => 'kandy_shortcode_kandy_sms',
    'tips callback' => 'kandy_shortcode_kandy_sms_tip',
  );

  $shortcodes['kandyCoBrowsing'] = array(
    'title' => t('Kandy Co-browsing'),
    'description' => t('Show kandy Co-browsing'),
    'process callback' => 'kandy_shortcode_kandy_cobrowsing',
    'tips callback' => 'kandy_shortcode_kandy_cobrowsing_tip'
  );

  $shortcodes['kandyLiveChat'] = array(
    'title' => t('Kandy Live Chat'),
    'description' => t('Show kandy live chat widget'),
    'process callback' => 'kandy_shortcode_kandy_livechat'
  );

  return $shortcodes;
}

/**
 * Display shortcode kandyVideo help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy Video Tip.
 */
function kandy_shortcode_kandy_video_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyVideo title="Me" id="myVideo"][/kandyVideo]') . '</strong> ';
  $output[] = t('Inserts an Kandy Video.') . '</p>';

  return implode(' ', $output);
}

/**
 * Display shortcode kandyVideoButton help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy video button tip.
 */
function kandy_shortcode_kandy_video_button_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyVideoButton class="myButtonStyle"][/kandyVideoButton]') . '</strong> ';
  $output[] = t('Inserts an Kandy Video Button. Two kandy video shortcode should be inline.') . '</p>';

  return implode(' ', $output);
}

/**
 * Display shortcode kandyVoiceButton help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy Video tip.
 */
function kandy_shortcode_kandy_voice_button_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyVoiceButton class= "myButtonStyle" id="my-button"][/kandyVoiceButton]') . '</strong> ';
  $output[] = t('Inserts an Kandy Voice Button.') . '</p>';

  return implode(' ', $output);
}

/**
 * Display shortcode kandyStatus help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy Status.
 */
function kandy_shortcode_kandy_status_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyStatus class="myStatusStyle" id="myStatus"][/kandyStatus]') . '</strong> ';
  $output[] = t('Inserts an Kandy Status.') . '</p>';

  return implode(' ', $output);
}

/**
 * Display shortcode kandyAddressBook help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy AddressBook Tip
 */
function kandy_shortcode_kandy_address_book_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyAddressBook class="myAddressBookStyle" id="myContact"][/kandyAddressBook]') . '</strong> ';
  $output[] = t('Inserts an Kandy AddressBook.') . '</p>';

  return implode(' ', $output);
}

/**
 * Display shortcode kandyChat help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy Chat Tip
 */
function kandy_shortcode_kandy_chat_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyChat class="myChatStyle" id ="my-chat"][/kandyChat]') . '</strong> ';
  $output[] = t('Inserts an Kandy Chat.') . '</p>';

  return implode(' ', $output);
}

/**
 * Display shortcode kandySms help.
 *
 * @param string $format
 *   Format.
 * @param string $long
 *   Long.
 *
 * @return string
 *   Kandy Chat Tip
 */
function kandy_shortcode_kandy_sms_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandySms class="mySmsStyle" id ="my-chat"][/kandySms]') . '</strong> ';
  $output[] = t('Inserts an Kandy Sms.') . '</p>';

  return implode(' ', $output);
}

function kandy_short_code_kandy_cobrowsing_tip($format, $long)
{
  $output = array();
  $output[] = '<p><strong>' . t('[kandyCoBrowsing class="myCoBrowsingStyle" id ="co-browsing"][/kandyCoBrowsing]') . '</strong> ';
  $output[] = t('Inserts an Kandy Co-browsing.') . '</p>';

  return implode(' ', $output);
}

/**
 * Kandy Setup load js, login.
 */
function kandy_setup()
{
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  global $user;

  $module_path = drupal_get_path('module', 'kandy');
  if (module_exists('kandy') && $user) {
    module_load_include('php', 'kandy', 'kandy_api');
    $assign_user = kandy_get_assign_user($user->uid);
    if ($assign_user) {
      $user_name = $assign_user->user_id;
      $password = $assign_user->password;
      $kandy_api_key = variable_get('kandy_api_key', KANDY_API_KEY);

      if (variable_get('kandy_jquery_reload', 1)) {

        if (debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)[1]['function'] == 'kandy_shortcode_kandy_cobrowsing') {
          //add jquery no conflict to use built in jquery ui dialog in cobrowsing shortcode
          drupal_add_js('var jq = jQuery.noConflict();', 'inline');
        }
        drupal_add_js(KANDY_JQUERY, array(
          'group' => 'kandy',
          'weight' => 1,
        ));
      }

      drupal_add_css(KANDY_SELECT2_PATH . 'select2.min.css', array(
        'group' => 'kandy',
        'weight' => 2,
        'type' => 'external',
      ));
      drupal_add_js(KANDY_SELECT2_PATH . 'select2.min.js', array(
        'group' => 'kandy',
        'weight' => 2,
      ));

      drupal_add_js(variable_get('kandy_js_url', KANDY_JS_URL), array(
        'group' => 'kandy',
        'weight' => 4,
      ));

      drupal_add_js(
        array(
          'loginInfo' => array(
            'apiKey' => $kandy_api_key,
            'username' => $user_name,
            'password' => $password
          )
        ),
        'setting'
      );

      $kandy_public_path = "public://kandy";

      if (!file_exists($kandy_public_path)) {
        kandy_publish_assets();
      }

      drupal_add_js($module_path . '/js/kandyDrupal.js', array(
        'group' => 'kandy',
        'weight' => 1,
      ));
      drupal_add_css($module_path . '/css/kandyDrupal.css', array(
        'group' => 'kandy',
        'weight' => 1,
      ));
      $result = array("success" => TRUE, "message" => '');
    } else {
      $result = array(
        "success" => FALSE,
        "message" => t('Can not found kandy user'),
      );
    }

  } else {
    $result = array(
      "success" => FALSE,
      "message" => t('Can not found kandy module'),
    );
  }
  return $result;

}

/**
 * Kandy shortcode init every page, clear cace before render shortcode.
 */
function kandy_shortcode_init()
{
  if ($node = menu_get_object()) {
    if (isset($node->nid)) {
      $nid = $node->nid;
      cache_clear_all("field:node:$nid", 'cache_field');
    }

  }
}

/**
 * Kandy Video Content.
 *
 * @param array $attr
 *   Attribute array.
 *
 * @return null|string
 *   Kandy Shortcode Video.
 */
function kandy_shortcode_kandy_video(array $attr)
{
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  $output = "";
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {
      // Init title attribute.
      if (isset($attr['title'])) {
        $title = $attr['title'];
      } else {
        $title = 'Kandy Video';
      }

      // Init class attribute.
      $class = 'kandyVideo ';
      if (isset($attr['class'])) {
        $class .= $attr['class'];
      }

      // Init id attribute.
      $id = 'kandy-video-' . rand() . ' ';
      if (isset($attr['id'])) {
        $id = $attr['id'];
      }

      // Init htmlOptions.
      $html_options_attributes = '';
      if (!isset($attr['style'])) {
        $html_options_attributes = "style = 'width: 300px; height: 225px;background-color: darkslategray;'";
      }

      foreach ($attr as $key => $value) {
        if ($key != "id" && $key != "class" && $key != "title") {
          $html_options_attributes .= $key . "= '" . $value . "'";
        }
      }

      $output = '<div class="' . $class . '">';
      $output .= '<p class="title">' . $title . '</p>';
      $output .= '<span class="video" id="' . $id . '"  ' . $html_options_attributes . '></span>';
      $output .= '</div>';
    } else {
      $output = '<p>' . t("Can not setup kandy video. Please contact administrator") . '</p>';
    }
  }
  return $output;

}

/**
 * Kandy Video Button Content.
 *
 * @param array $attr
 *   Attribute Array.
 *
 * @return null|string
 *   Kandy Video Button.
 */
function kandy_shortcode_kandy_video_button(array $attr)
{
  $output = "";
  // Do not render shortcode when edit page.
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {

      $kandy_public_path = "public://kandy";
      drupal_add_js($kandy_public_path . '/js/KandyVideo.js');
      drupal_add_css($kandy_public_path . '/css/KandyVideo.css', array(
        'group' => 'kandy',
        'weight' => 100,
      ));

      // Init class attribute.
      $class = 'kandyButton ';
      if (isset($attr['class'])) {
        $class .= filter_xss($attr['class']);
      }

      // Init id attribute.
      $id = 'kandy-video-button' . rand();
      if (isset($attr['id'])) {
        $id = filter_xss($attr['id']);
      }

      // Init incominglabel attribute.
      $incoming_label = 'Incoming Call...';
      if (isset($attr['incominglabel'])) {
        $incoming_label = ($attr['incominglabel']);
      }

      // Init incomingbuttontext attribute.
      $incoming_button_text = 'Answer';
      if (isset($attr['incomingbuttontext'])) {
        $incoming_button_text = ($attr['incomingbuttontext']);
      }

      // Init rejectbuttontext attribute.
      $reject_button_text = 'Reject';
      if (isset($attr['rejectbuttontext'])) {
        $incoming_button_text = ($attr['rejectbuttontext']);
      }

      // Init calloutlabel attribute.
      $call_out_label = 'User to call';
      if (isset($attr['calloutlabel'])) {
        $call_out_label = ($attr['calloutlabel']);
      }

      // Init calloutbuttontext attribute.
      $call_out_button_text = 'Call';
      if (isset($attr['calloutbuttontext'])) {
        $call_out_button_text = filter_xss($attr['calloutbuttontext']);
      }

      // Init callinglabel attribute.
      $calling_label = 'Calling...';
      if (isset($attr['callinglabel'])) {
        $calling_label = filter_xss($attr['callinglabel']);
      }

      // Init callingbuttontext attribute.
      $calling_button_text = 'End Call';
      if (isset($attr['callingbuttontext'])) {
        $calling_button_text = filter_xss($attr['callingbuttontext']);
      }

      // Init oncalllabel attribute.
      $on_call_label = 'You are connected!';
      if (isset($attr['oncalllabel'])) {
        $on_call_label = filter_xss($attr['oncalllabel']);
      }

      // Init onCallButtonText attribute.
      $on_call_button_text = 'End Call';
      if (isset($attr['oncallbuttontext'])) {
        $on_call_button_text = filter_xss($attr['oncallbuttontext']);
      }

      // Init holdcallbuttontext attribute.
      $hold_call_button_text = 'Hold Call';
      if (isset($attr['holdcallbuttontext'])) {
        $hold_call_button_text = filter_xss($attr['holdcallbuttontext']);
      }

      // Init resumecallbuttontext attribute.
      $resume_call_button_text = 'Resume Call';
      if (isset($attr['resumecallbuttontext'])) {
        $resume_call_button_text = filter_xss($attr['resumecallbuttontext']);
      }

      $ajax_user_search_url = url(
        'kandy/get_user_for_search',
        array('absolute' => TRUE)
      );

      $output = '<div class="' . $class . '" id ="' . $id . '" data-call-id="0">' .
        '<div class="kandyButtonComponent kandyVideoButtonSomeonesCalling" id="' . $id . '-incomingCall">' .
        '<label>' . $incoming_label . '</label>
        <input data-container="' . $id . '" class="btmAnswerVideoCall" type="button" value="' . $incoming_button_text . '"/>' .
        '<input style="visibility: hidden" class="btmAnswerRejectCall" type="button" value="' . $reject_button_text . '"/>' .
        '</div>
        <div class="kandyButtonComponent kandyVideoButtonCallOut" id="' . $id . '-callOut">' .
        '<label>' . $call_out_label . '</label><input id="' . $id . '-callOutUserId" data-ajax-url="' . $ajax_user_search_url . '" type="text" value="" class="select2"/>' .
        '<input data-container="' . $id . '"  class="btnCall btnVideoCall" id="callBtn" type="button" value="' . $call_out_button_text . '"/>' .
        '</div>
        <div class="kandyButtonComponent kandyVideoButtonCalling" id="' . $id . '-calling">' .
        '<label>' . $calling_label . '</label>
        <input data-container="' . $id . '"  type="button" class="btnEndCall" value="' . $calling_button_text . '"/>' .
        '</div>
        <div class="kandyButtonComponent kandyVideoButtonOnCall" id="' . $id . '-onCall">' .
        '<label>' . $on_call_label . '</label>
        <input data-container="' . $id . '"  class="btnEndCall" type="button" value="' . $on_call_button_text . '"/>' .
        '<input style="visibility: hidden" class="btnHoldCall" type="button" value="' . $hold_call_button_text . '"/>' .
        '<input style="visibility: hidden" class="btnResumeCall" type="button" value="' . $resume_call_button_text . '"/>' .
        '</div></div>';

      if (isset($result['output'])) {
        $output .= $result['output'];
      }
    } else {
      $output = '<p>' . t('Can not setup kandy video button. Please contact administrator') . '<p>';
    }
  }
  return $output;
}

/**
 * Kandy Voice Button Content.
 *
 * @param array $attr
 *   Attribute Array.
 *
 * @return null|string
 *   Kandy Voice Button.
 */
function kandy_shortcode_kandy_voice_button(array $attr)
{

  // Do not render shortcode when edit page.
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {

      $kandy_public_path = "public://kandy";
      drupal_add_js($kandy_public_path . '/js/KandyVoice.js');
      drupal_add_css($kandy_public_path . '/css/KandyVoice.css', array(
        'group' => 'kandy',
        'weight' => 100,
      ));

      // Init type attribute.
      $call_type = '';
      if (isset($attr['type'])) {
        $call_type = ($attr['type']);
      }
      // Init callTo attribute.
      $call_to = '';
      if (isset($attr['callto'])) {
        $call_to = ($attr['callto']);
      }

      // Init class attribute.
      $class = 'kandyButton ';
      if (isset($attr['class'])) {
        $class .= filter_xss($attr['class']);
      }

      // Init id attribute.
      $id = 'kandy-voice-button' . rand();
      if (isset($attr['id'])) {
        $id = filter_xss($attr['id']);
      }

      // Init incominglabel attribute.
      $incoming_label = 'Incoming Call...';
      if (isset($attr['incominglabel'])) {
        $incoming_label = filter_xss($attr['incominglabel']);
      }

      // Init incomingbuttontext attribute.
      $incoming_button_text = 'Answer';
      if (isset($attr['incomingbuttontext'])) {
        $incoming_button_text = filter_xss($attr['incomingbuttontext']);
      }

      // Init calloutlabel attribute.
      $call_out_label = 'User to call';
      if (isset($attr['calloutlabel'])) {
        $call_out_label = filter_xss($attr['calloutlabel']);
      }

      // Init calloutbuttontext attribute.
      $call_out_button_text = 'Call';
      if (isset($attr['calloutbuttontext'])) {
        $call_out_button_text = filter_xss($attr['calloutbuttontext']);
      }

      // Init callinglabel attribute.
      $calling_label = 'Calling...';
      if (isset($attr['callinglabel'])) {
        $calling_label = filter_xss($attr['callinglabel']);
      }

      // Init callingbuttontext attribute.
      $calling_button_text = 'End Call';
      if (isset($attr['callingbuttontext'])) {
        $calling_button_text = filter_xss($attr['callingbuttontext']);
      }

      // Init oncalllabel attribute.
      $on_call_label = 'You are connected!';
      if (isset($attr['oncalllabel'])) {
        $on_call_label = filter_xss($attr['oncalllabel']);
      }

      // Init oncallbuttontext attribute.
      $on_call_button_text = 'End Call';
      if (isset($attr['oncallbuttontext'])) {
        $on_call_button_text = filter_xss($attr['oncallbuttontext']);
      }

      // Init holdcallbuttontext attribute.
      $hold_call_button_text = 'Hold Call';
      if (isset($attr['holdcallbuttontext'])) {
        $hold_call_button_text = filter_xss($attr['holdcallbuttontext']);
      }

      // Init resumecallbuttontext attribute.
      $resume_call_button_text = 'Resume Call';
      if (isset($attr['resumecallbuttontext'])) {
        $resume_call_button_text = filter_xss($attr['resumecallbuttontext']);
      }

      // Init rejectbuttontext attribute.
      $reject_button_text = 'Reject';
      if (isset($attr['rejectbuttontext'])) {
        $incoming_button_text = filter_xss($attr['rejectbuttontext']);
      }

      $ajax_user_search_url = url(
        'kandy/get_user_for_search',
        array('absolute' => TRUE)
      );

      if (strtoupper($call_type) == KANDY_PSTN_TYPE) {

        if (!isset($attr['calloutlabel'])) {
          $call_out_label = 'Enter Number';
        }
        $output = "";
        if (empty($call_to)) {

          $output .= '<div class="' . $class . '" id ="' . $id . '" data-call-id="">' .
            '<div class="kandyButtonComponent kandyVideoButtonSomeonesCalling" id="' . $id . '-incomingCall">' .
            '<label>' . $incoming_label . '</label>
            <input data-container="' . $id . '" class="btnAnswerVoiceCall" type="button" value="' . $incoming_button_text . '"/>' .
            '<input data-container="' . $id . '" style="visibility: hidden" class="btmAnswerRejectCall" type="button" value="' . $reject_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonCallOut" id="' . $id . '-callOut">' .
            '<label>' . $call_out_label . '</label>
            <input id="' . $id . '-callOutUserId" style="display:block;" type="text" value=""/>' .
            '<input data-container="' . $id . '" class="btnCallPstn" id="callBtn" type="button" value="' . $call_out_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonCalling" id="' . $id . '-calling">' .
            '<label>' . $calling_label . '</label>
            <input data-container="' . $id . '" type="button" class="btnEndCall" value="' . $calling_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonOnCall" id="' . $id . '-onCall">' .
            '<label>' . $on_call_label . '</label>
            <input data-container="' . $id . '" class="btnEndCall" type="button" value=" ' . $on_call_button_text . ' "/>' .
            '<input data-container="' . $id . '" style="visibility: hidden" class="btnHoldCall" type="button" value="' . $hold_call_button_text . '"/>' .
            '<input data-container="' . $id . '" style="visibility: hidden" class="btnResumeCall" type="button" value="' . $resume_call_button_text . '"/>' .
            '</div><div class="videoVoiceCallHolder"><div id="theirVideo" class="video"></div></div></div>';

        } else {
          $output .= '<div class="' . $class . '" id ="' . $id . '" data-call-id="0">' .
            '<div class="kandyButtonComponent kandyVideoButtonSomeonesCalling" id="' . $id . '-incomingCall">' .
            '<label>' . $incoming_label . '</label>
            <input data-container="' . $id . '" class="btnAnswerVoiceCall" type="button" value="' . $incoming_button_text . '"/>' .
            '<input data-container="' . $id . '" style="visibility: hidden" class="btmAnswerRejectCall" type="button" value="' . $reject_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonCallOut" id="' . $id . '-callOut">' .
            '<input id="' . $id . '-callOutUserId" type="text" value ="' . $call_to . '"/>' .
            '<input data-container="' . $id . '" class="btnCallPstn" id="callBtn" type="button" value="' . $call_out_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonCalling" id="' . $id . '-calling">' .
            '<label>' . $calling_label . '</label><input data-container="' . $id . '" type="button" class="btnEndCall" value="' . $calling_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonOnCall" id="' . $id . '-onCall">' .
            '<label>' . $on_call_label . '</label>
            <input data-container="' . $id . '" class="btnEndCall" type="button" value=" ' . $on_call_button_text . ' "/>' .
            '<input data-container="' . $id . '" style="visibility: hidden" class="btnHoldCall" type="button" value="' . $hold_call_button_text . '"/>' .
            '<input data-container="' . $id . '" style="visibility: hidden" class="btnResumeCall" type="button" value="' . $resume_call_button_text . '"/>' .
            '</div><div class="videoVoiceCallHolder"><div id="theirVideo" class="video"></div></div></div>';

        }

      } else {
        if (empty($call_to)) {
          $output = '<div class="' . $class . '" id ="' . $id . '" data-call-id="">' .
            '<div class="kandyButtonComponent kandyVideoButtonSomeonesCalling" id="' . $id . '-incomingCall">' .
            '<label>' . $incoming_label . '</label>
            <input data-container="' . $id . '"  class="btnAnswerVoiceCall" type="button" value="' . $incoming_button_text . '"/>' .
            '<input data-container="' . $id . '"  style="visibility: hidden" class="btmAnswerRejectCall" type="button" value="' . $reject_button_text . '"/>' .
            '</div>' .

            '<div class="kandyButtonComponent kandyVideoButtonCallOut" id="' . $id . '-callOut">' .
            '<label>' . $call_out_label . '</label>
            <input id="' . $id . '-callOutUserId" data-ajax-url="' . $ajax_user_search_url . '" type="text" value="" class="select2"/>' .
            '<input data-container="' . $id . '" class="btnCall btnVoiceCall" id="callBtn" type="button" value="' . $call_out_button_text . '"/>' .
            '</div>' .

            '<div class="kandyButtonComponent kandyVideoButtonCalling" id="' . $id . '-calling">' .
            '<label>' . $calling_label . '</label>
            <input data-container="' . $id . '"  type="button" class="btnEndCall" value="' . $calling_button_text . '"/>' .
            '</div>' .
            '<div class="kandyButtonComponent kandyVideoButtonOnCall" id="' . $id . '-onCall">' .
            '<label>' . $on_call_label . '</label>
            <input data-container="' . $id . '"  class="btnEndCall" type="button" value=" ' . $on_call_button_text . ' "/>' .
            '<input data-container="' . $id . '"  style="visibility: hidden" class="btnHoldCall" type="button" value="' . $hold_call_button_text . '"/>' .
            '<input data-container="' . $id . '"  style="visibility: hidden" class="btnResumeCall" type="button" value="' . $resume_call_button_text . '"/>' .
            '</div><div class="videoVoiceCallHolder"><div id="theirVideo" class="video"></div></div></div>';
        } else {
          $output = '<div class="' . $class . '" id ="' . $id . '" data-call-id="">' .
            '<div class="kandyButtonComponent kandyVideoButtonSomeonesCalling" id="' . $id . '-incomingCall">' .
            '<label>' . $incoming_label . '</label>
            <input data-container="' . $id . '"  class="btnAnswerVoiceCall" type="button" value="' . $incoming_button_text . '"/>' .
            '<input data-container="' . $id . '"  style="visibility: hidden" class="btmAnswerRejectCall" type="button" value="' . $reject_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonCallOut" id="' . $id . '-callOut">' .
            '<input id="' . $id . '-callOutUserId" type="text" value ="' . $call_to . '"/>' .
            '<input data-container="' . $id . '"  class="btnCall btnCallPstn" id="callBtn" type="button" value="' . $call_out_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonCalling" id="' . $id . '-calling">
            <label>' . $calling_label . '</label>
            <input data-container="' . $id . '"  type="button" class="btnEndCall" value="' . $calling_button_text . '"/>' .
            '</div>
            <div class="kandyButtonComponent kandyVideoButtonOnCall" id="' . $id . '-onCall">
            <label>' . $on_call_label . '</label>
            <input data-container="' . $id . '"  class="btnEndCall" type="button" value=" ' . $on_call_button_text . ' "/>' .
            '<input data-container="' . $id . '"  style="visibility: hidden" class="btnHoldCall" type="button" value="' . $hold_call_button_text . '"/>' .
            '<input data-container="' . $id . '"  style="visibility: hidden" class="btnResumeCall" type="button" value="' . $resume_call_button_text . '"/>' .
            '</div><div class="videoVoiceCallHolder"><div id="theirVideo" class="video"></div></div></div>';;
        }
      }

      if (isset($result['output'])) {
        $output .= $result['output'];
      } else {
      }
    } else {
      $output = '<p>' . t('Can not setup kandy voice button. Please contact administrator') . '<p>';
    }
    return $output;
  }

}

/**
 * Kandy Status Shortcode.
 *
 * @param array $attr
 *   Attribute Array.
 *
 * @return bool|string
 *   Kandy Status.
 */
function kandy_shortcode_kandy_status(array $attr)
{
  // Do not render shortcode when edit page.
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {

      // Init title attribute.
      if (isset($attr['title'])) {
        $title = filter_xss($attr['title']);
      } else {
        $title = t('My Status');
      }
      // Init class attribute.
      $class = 'kandyStatus ';
      if (isset($attr['class'])) {
        $class .= filter_xss($attr['class']);
      }

      // Init id attribute.
      $id = 'kandy-status' . rand() . ' ';
      if (isset($attr['id'])) {
        $id = filter_xss($attr['id']);
      }

      // Init htmlOptions attribute.
      $html_options_attributes = '';

      if (!isset($attr['style'])) {
        $html_options_attributes = "";
      }
      foreach ($attr as $key => $value) {
        if ($key != "id" && $key != "class" && $key != "title") {
          $html_options_attributes .= $key . "= '" . $value . "'";
        }
      }
      $output = '<div  class="' . $class . '"><span class="title"> ' . $title . ' </span><select id="' . $id . '" class="dropDown" ' . filter_xss($html_options_attributes) . ' onchange="kandy_myStatusChanged($(this).val())">' .
        '<option value="0" selected>Available</option>' .
        '<option value="1">Unavailable</option><option value="2">Away</option><option value="3">Out To Lunch</option>' .
        '<option value="4">Busy</option><option value="5">On Vacation</option><option value="6">Be Right Back</option></select>' .
        '</div>';
    } else {
      $output = '<p>' . t('Can not setup kandy status. Please contact administrator') . '<p>';
    }
    return $output;
  }
}

/**
 * Kandy Presence.
 *
 * @param array $attr
 *   Array Attribute.
 *
 * @return null|string
 *   Kandy AddressBook.
 */
function kandy_shortcode_kandy_address_book(array $attr)
{
  // Do not render shortcode when edit page.
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {

      $kandy_public_path = "public://kandy";
      drupal_add_js($kandy_public_path . '/js/KandyAddressBook.js');
      drupal_add_css($kandy_public_path . '/css/KandyAddressBook.css', array(
        'group' => 'kandy',
        'weight' => 100,
      ));

      // Init title attribute.
      if (isset($attr['title'])) {
        $title = filter_xss($attr['title']);
      } else {
        $title = t('My Contact');
      }
      // Init class attribute.
      $class = 'kandyAddressBook ';
      if (isset($attr['class'])) {
        $class .= filter_xss($attr['class']);
      }

      // Init id attribute.
      $id = 'kandy-address-book' . rand() . ' ';
      if (isset($attr['id'])) {
        $id = filter_xss($attr['id']);
      }

      // Init userlabel attribute.
      $user_label = 'User';
      if (isset($attr['userlabel'])) {
        $user_label = $attr['userlabel'];
      }

      // Init userlabel attribute.
      $add_contact_label = 'Add Contact';
      if (isset($attr['addcontactlabel'])) {
        $add_contact_label = $attr['addcontactlabel'];
      }

      // Init htmlOptions attribute.
      $html_options_attributes = '';

      foreach ($attr as $key => $value) {
        if ($key != "id" && $key != "class" && $key != "title") {
          $html_options_attributes .= $key . "= '" . $value . "'";
        }
      }

      $get_user_for_search_url = url(
        'kandy/get_user_for_search',
        array('absolute' => TRUE)
      );

      $get_name_for_contact_url = url(
        'kandy/get_name_for_contact',
        array('absolute' => TRUE)
      );
      $output = '<div class="' . $class . '" id="' . $id . '" ' . filter_xss($html_options_attributes) . '>
      <div class="kandyAddressContactList"><div class="myContactsTitle"><p>' . $title . '</p><input id="get_user_for_search_url" type="hidden" value="' . $get_user_for_search_url . '" /><input id="get_name_for_contact_url" type="hidden" value="' . $get_name_for_contact_url . '" /></div></div><div class="kandyDirectorySearch">' .
        $user_label . ' : <input id="kandySearchUserName" type="text" value="" class="select2" data-ajax-url="' . $get_user_for_search_url . '"/><input type="button" value="' . $add_contact_label . '" onclick="addContacts();"/></div>';
    } else {
      $output = '<p>' . t('Can not setup kandy address book. Please contact administrator') . '<p>';
    }
    return $output;
  }

}

/**
 * Kandy Chat Content.
 *
 * @param array $attr
 *   Attribute Array.
 *
 * @return null|string
 *   Kandy Chat.
 */
function kandy_shortcode_kandy_chat(array $attr)
{
  $output = "";
  // Do not render shortcode when edit page.
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {

      $kandy_public_path = "public://kandy";
      drupal_add_js($kandy_public_path . '/js/KandyChat.js');

      drupal_add_css(KANDY_FONT_AWESOME, array(
        'group' => 'kandy',
        'weight' => 2,
        'type' => 'external',
      ));

      drupal_add_css($kandy_public_path . '/css/KandyChat.css', array(
        'group' => 'kandy',
        'weight' => 100,
      ));

      // Init class attribute.
      $class = 'kandyChat ';
      if (isset($attr['class'])) {
        $class .= filter_xss($attr['class']);
      }

      // Init id attribute.
      $id = 'kandy-chat' . rand() . ' ';
      if (isset($attr['id'])) {
        $id = filter_xss($attr['id']);
      }

      // Init contacts label attribute.
      $contact_label = t('Contacts');
      if (isset($attr['contactlabel'])) {
        $contact_label = filter_xss($attr['contactlabel']);
      }

      // Init htmlOptions attribute.
      $html_options_attributes = '';

      foreach ($attr as $key => $value) {
        if ($key != "id" && $key != "class" && $key != "title") {
          $html_options_attributes .= $key . "= '" . $value . "'";
        }
      }
      // Get current kandy user.
      global $user;
      $assign_user = kandy_get_assign_user($user->uid);
      if ($assign_user) {

        $get_name_for_contact_url = url(
          'kandy/get_name_for_contact',
          array('absolute' => TRUE)
        );

        $get_name_for_chat_content_url = url(
          'kandy/get_name_for_chat_content',
          array('absolute' => TRUE)
        );
        $get_user_for_search_url = url(
          'kandy/get_user_for_search',
          array('absolute' => TRUE)
        );

        $output = '<div class="' . $class . ' cd-tabs" id="' . $id . '" ' . filter_xss($html_options_attributes) . ' >' .
          '<input type="hidden" class="kandy_current_username" value="' . $user->name . '"/>' .
          '<input type="hidden" class="kandy_user" value="' . $assign_user->user_id . '@' . $assign_user->domain_name . '"/>' .
          '<input id="get_name_for_contact_url" type="hidden" value="' . $get_name_for_contact_url . '" />' .
          '<input id="get_name_for_chat_content_url" type="hidden" value="' . $get_name_for_chat_content_url . '" />' .
          '<div class="chat-heading">
              <div class="contact-heading">
                  <label>' . $contact_label . '</label>
                            <select id="contactFilter" onchange="kandy_contactFilterChanged(jQuery(this).val())">
                            <option value="all">All</option>
                            <option value="offline">Offline</option>
                            <option value="available">Available</option>
                            <option value="unavailable">Unavailable</option>
                            <option value="away">Away</option>
                            <option value="out-to-lunch">Out To Lunch</option>
                            <option value="busy">Busy</option>
                            <option value="on-vacation">On Vacation</option>
                            <option value="be-right-back">Be Right Back</option>
                            </select>
                        </div>
                        <div class="chat-with-message">
                            Chatting with <span class="chat-friend-name"></span>
                        </div>
                        <button id="btn-create-group-modal" class="chat-create-group">Create Group</button>
                        <div class="clear-fix"></div>
                    </div>' .
          '<nav> <ul class="cd-tabs-navigation contacts"></ul>
                  <div class="separator hidden group"><span>Groups</span></div>
                  <ul class="cd-tabs-navigation groups"></ul>
                  <div class="separator hidden livechatgroup"><span>Live Chat</span></div>
                  <ul class="cd-tabs-navigation livechats "></ul>
          </nav>' .
          '<ul class="cd-tabs-content"></ul><div style="clear: both;"></div>';

        $output .= '<div class="kandyModal" id="kandy-chat-create-group-modal" title="Create a new group">
                        <h3>Create a group</h3><hr>
                        <label for="right-label" class="right inline">Group name</label>
                        <input id="kandy-chat-create-session-name" placeholder="Group name">
                        <div class="buttons">
                            <button id="kandy-chat-modal-button-create-group" class="button tiny">Save</button>
                            <button id="kandy-chat-modal-button-close" class="button tiny">Cancel</button>
                        </div>
                    </div>
                    <div class="kandyModal" id="kandy-chat-add-user-modal" title="Add user to group">
                        <h3>Add user to group</h3><hr>
                        <label for="right-label" class="right inline">Username</label>
                        <input class="select2" id="kandy-chat-invite-username" placeholder="Username" data-ajax-url="' . $get_user_for_search_url . '">
                        <div class="buttons">
                            <button id="kandy-chat-modal-button-add-user" class="button tiny">Add User</button>
                            <button id="kandy-chat-modal-invite-button-close" class="button tiny">Cancel</button>
                        </div>
                    </div></div>';
        if($assign_user->type == KANDY_USER_TYPE_AGENT) {
          drupal_add_js(
            "jQuery(document).ready(function()
                {
                    heartBeat(60000);
                }
            )",
          'inline');
        }
      } else {
        $output = t('Not found kandy user');
      }
    } else {
      $output = '<p>' . t('Can not setup kandy chat. Please contact administrator') . '<p>';
    }

  }
  return $output;

}

/**
 * Kandy SMS Content.
 *
 * @param array $attr
 *   Attribute Array.
 *
 * @return null|string
 *   Kandy Chat.
 */
function kandy_shortcode_kandy_sms(array $attr)
{
  $output = "";
  // Do not render shortcode when edit page.
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return FALSE;
  }
  if (!empty($attr)) {
    $result = kandy_setup();
    if ($result['success']) {

      // Init class attribute.
      $class = '';
      if (isset($attr['class'])) {
        $class .= ' ' . filter_xss($attr['class']);
      }

      // Init id attribute.
      $id = 'kandy-sms' . rand() . ' ';
      if (isset($attr['id'])) {
        $id = filter_xss($attr['id']);
      }

      $message_holder = 'Message...';
      if (isset($attr['messageholder'])) {
        $message_holder = ($attr['messageholder']);
      }

      $number_holder = 'Number...';
      if (isset($attr['numberholder'])) {
        $number_holder = ($attr['numberholder']);
      }

      $btn_send_label = 'Send';
      if (isset($attr['btnsendlabel']) && $attr['btnsendlabel'] != '') {
        $btn_send_label = ($attr['btnsendlabel']);
      }

      // Init htmlOptions attribute.
      $html_options_attributes = '';

      foreach ($attr as $key => $value) {
        if ($key != "id" && $key != "class" && $key != "title") {
          $html_options_attributes .= $key . "= '" . $value . "'";
        }
      }
      // Get current kandy user.
      global $user;
      $assign_user = kandy_get_assign_user($user->uid);
      if ($assign_user) {
        $output = '<div class="kandy-sms-wrapper' . $class . '" ' . filter_xss($html_options_attributes) . '>
            <div class="kandy-sms-msg-content-wrapper">
                <textarea class="kandy-sms-content" placeholder="' . $message_holder . '" name="msg" id="kandy-sms-content-' . $id . '" cols="50" rows="3"></textarea>
            </div>
            <div class="kandy-sms-to-wrapper">
                <input class="kandy-sms-to" type="text" placeholder="' . $number_holder . '" name="phoneNum" id="kandy-sms-to-' . $id . '">
            </div>
            <input disabled class="kandy-sms-send-btn" id="kandy-sms-send-btn' . $id . '" type="button" value="' . $btn_send_label . '"/>
        </div>';
      } else {
        $output = t('Not found kandy user');
      }
    } else {
      $output
        = '<p>' . t('Can not setup kandy chat. Please contact administrator')
        . '<p>';
    }

  }
  return $output;

}

function kandy_shortcode_kandy_cobrowsing($attr)
{
  module_load_include('php', 'kandy', 'kandy_api');
  global $user;
  $assignUser = kandy_get_assign_user($user->uid);
  $output = "";
  $defaults = array(
    'class' => '',
    'holder_id' => 'cobrowsing-holder',
    'btn_terminate_id' => 'btnTerminateSession',
    'btn_stop_id' => 'btnStopCoBrowsing',
    'btn_leave_id' => 'btnLeaveSession',
    'btn_start_browsing_viewer_id' => 'btnStartCoBrowsingViewer',
    'btn_start_cobrowsing_id' => 'btnStartCoBrowsing',
    'btn_connect_session_id' => 'btnConnectSession',
    'current_user' => $assignUser,
    'session_list_id' => 'openSessions'
  );

  $params = array_merge($defaults, $attr);

  if (!empty($params)) {
    $result = kandy_setup();
    // get current kandy user
    if ($result['success']) {
      if ($assignUser) {
        $module_path = drupal_get_path('module', 'kandy');
        drupal_add_library('system', 'ui.dialog');
        drupal_add_js('var cobrowsing = ' . json_encode($params) . ';', 'inline');
        drupal_add_js(KANDY_COBROWSING_JS, array(
          'group' => 'kandy',
          'weight' => 4
        ));
        drupal_add_js($module_path . '/js/kandyCoBrowsing.js', array(
          'group' => 'kandy',
          'weight' => 5
        ));

        $output = "
                <div id=\"coBrowsing\" class='{$params["class"]}'>
                    <button class=\"small tiny\" id=\"btnCreateSession\">Create Session</button>
                    <div>
                        <div class=\"openSessionWrap\">
                            <label>Available sessions</label>
                            <select id=\"{$params['session_list_id']}\"></select>
                        </div>
                        <div class=\"buttons\">
                            <button class=\"small\" title='join session' id=\"{$params['btn_connect_session_id']}\">Connect</button>
                            <button class=\"small\" title='Terminate session' id=\"{$params['btn_terminate_id']}\">Terminate</button>
                            <button class=\"small\" title='Start co-browsing' id=\"{$params['btn_start_cobrowsing_id']}\">Start</button>
                            <button class=\"small\" title='Start co-browsing viewer' id=\"{$params['btn_start_browsing_viewer_id']}\">Start viewer</button>
                            <button class=\"small\" title='Stop co-browsing' id=\"{$params['btn_stop_id']}\">Stop</button>
                            <button class=\"small\" title='Leave session' id=\"{$params['btn_leave_id']}\">Leave</button>
                        </div>
                    </div>
                    <div id=\"{$params['holder_id']}\"></div>
                </div>
                <div id=\"kandy-chat-create-group-modal\" title=\"Create a session\">
                    <label for=\"right-label\" class=\"right inline\">Session name</label>
                    <input type=\"text\" id=\"kandy-chat-create-session-name\" placeholder=\"Session name\">
                </div>";

      }
    } else {
      $output = '<p>' . t('Could not setup Kandy CoBrowsing. Please contact administrator') . '<p>';
    }
  }
  return $output;
}

function kandy_shortcode_kandy_livechat($attr)
{
  if (!empty($attr)) {
    if (variable_get('kandy_jquery_reload', 1)) {
      drupal_add_js(KANDY_JQUERY, array(
        'group' => 'kandy',
        'weight' => 1
      ));
    }
    drupal_add_js(variable_get('kandy_js_url', KANDY_JS_URL), array(
      'group' => 'kandy',
      'weight' => 4,
    ));
    drupal_add_js(KANDY_RATING_JS, array(
      'group' => 'kandy',
      'weight' => 4,
    ));

    drupal_add_js(KANDY_LIVECHAT_JS, array(
      'group' => 'kandy',
      'weight' => 4
    ));

    drupal_add_css(KANDY_LIVECHAT_CSS, array(
      'group' => 'kandy',
      'weight' => 99
    ));

    drupal_add_css(KANDY_RATING_CSS, array(
      'group' => 'kandy',
      'weight' => 100
    ));
    $defaultAttr = array(
      'id' => 'liveChat',
      'class' => '',
    );
    $attr = array_merge($defaultAttr, $attr);

    if (!isset($_SESSION['kandyLiveChatUserInfo'])) {
      $attr['class'] .= ' kandy_hidden';
      $func = 'LiveChatUI.changeState();';
    } else {
      $func = 'getKandyUsers()';
    }
    $output = '
      <div id="' . $attr['id'] . '" class="liveChat ' . $attr['class'] . '">
    <div class="header">
      Kandy live chat
      <span class="closeChat handle" title="end chat" style="display: none">x</span>
      <span class="minimize handle" title="minimize">_</span>
      <span id="restoreBtn"></span>
    </div>
    <div class="liveChatBody">
      <div id="waiting">
        <img id="loading" width="30px" height="30px" src="' . KANDY_MODULE_URL . '/img/loading.gif' . '" title="loading">
        <p>Please wait a moment...</p>
      </div>
      <div id="registerForm">
        <form id="customerInfo" method="POST" action="" >
          <label for="customerName">Your name</label>
          <input type="text" name="customerName" id="customerName" class="" />
          <span data-input="customerName" style="display: none" class="error"></span>
          <label for="customerEmail">Your email</label>
          <input type="text" name="customerEmail" id="customerEmail" class="" />
          <span data-input="customerEmail" style="display: none" class="error"></span>
          <input class="form-submit" type="submit" value="Start chat"/>
        </form>
      </div>
      <div id="ratingForm">
        <h3 class="formTitle">Rate for <span class="agentName"></span> </h3>
        <form>
          <select id="backing2b">
            <option title="" value="1">1</option>
            <option title="" value="2">2</option>
            <option title="" value="3">3</option>
            <option title="" value="4">4</option>
            <option title="" value="5" selected="selected">5</option>
          </select>
          <div class="rateit" data-rateit-backingfld="#backing2b"></div>
          <textarea id="rateComment" rows="3" placeholder="Say something about your supporter"></textarea>
          <a id="btnEndSession" class="button" href="javascript:;">No, thanks</a>
          <input id="btnSendRate" class="form-submit" type="submit"/>
        </form>
        <div class="message">
          <h3>Thanks you! Good bye!</h3>
        </div>
      </div>
        <div class="customerService">
          <div class="avatar">
              <img src="' . KANDY_MODULE_URL . '/img/icon-helpdesk.png' . '">
          </div>
          <div class="helpdeskInfo">
              <span class="agentName"></span>
              <p class="title">Support Agent</p>
          </div>
        </div>
        <div id="messageBox" class="" style="">
          <ul>
              <li class="their-message"><span class="username"></span>: Hi, what brings you here?</li>
          </ul>
        </div>
        <div class="formChat" style="">
          <form id="formChat">
              <input type="text" value="" name="message" id="messageToSend" placeholder="Type here and press Enter to send">
          </form>
        </div>
    </div>
  </div>';
  drupal_add_js(
    '//agent user id
    var agent;
    var rateData;
    jQuery(function(){
      ' . $func . '
      jQuery(".liveChat #ratingForm .rateit").bind("rated", function(){
        var ri = jQuery(this);
        rateData = rateData || {};
        rateData.rate = {id: agent.main_user_id, point: ri.rateit("value")}
      });

    jQuery(".liveChat #ratingForm .rateit").bind("reset", function(){
      rateData = rateData || {};
        if(rateData.hasOwnProperty("rate")){
          delete rateData.rate;
        }
      });
  });'
  ,'inline');
    return $output;
  }
}

